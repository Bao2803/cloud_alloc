package westwood222.cloud_alloc.service.storage.worker;

import jakarta.annotation.Nonnull;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import westwood222.cloud_alloc.dto.storage.worker.delete.WorkerDeleteRequest;
import westwood222.cloud_alloc.dto.storage.worker.delete.WorkerDeleteResponse;
import westwood222.cloud_alloc.dto.storage.worker.read.WorkerReadRequest;
import westwood222.cloud_alloc.dto.storage.worker.read.WorkerReadResponse;
import westwood222.cloud_alloc.dto.storage.worker.upload.WorkerUploadRequest;
import westwood222.cloud_alloc.dto.storage.worker.upload.WorkerUploadResponse;
import westwood222.cloud_alloc.exception.external.ExternalException;
import westwood222.cloud_alloc.model.Account;


/**
 * This class provides a way to interact with the cloud storage provider linked to {@code this.account}
 * Solid implementation of this class can upload, delete, and read a resource from the account's Cloud Storage.
 */
@AllArgsConstructor
@RequiredArgsConstructor
public abstract class CloudStorageService {
    @Getter
    @Nonnull
    protected final Account account;    // the account that this CloudStorageService is referencing

    @Setter // temp for frag demo purpose; TODO: remove
    protected long freeSpace;           // the current free space in the cloud storage specified by account

    public abstract long getFreeSpace();

    /**
     * Upload a file to a cloud storage
     *
     * @param request contains Multipart of the file, and additional fields needed for uploading
     * @return foreignId of the uploaded file, as well as additional info needed by the caller.
     * @throws ExternalException when something went wrong during uploading
     */
    public abstract WorkerUploadResponse upload(WorkerUploadRequest request);

    /**
     * Read/get a file from a cloud storage
     *
     * @param request foreignId of the target file, and additional fields needed for uploading
     * @return link (generated by the cloud storage provider) to view the file (and possibly download it).
     * @throws ExternalException when something went wrong during reading the file
     */
    public abstract WorkerReadResponse read(WorkerReadRequest request);

    /**
     * Delete a file from a cloud storage
     *
     * @param request foreignId of the target file, and whether the delete operation is hard or soft.
     * @return the date and time that the file will be permanently deleted; null if hard delete.
     * @throws ExternalException when something went wrong during reading the file
     */
    public abstract WorkerDeleteResponse delete(WorkerDeleteRequest request);
}
