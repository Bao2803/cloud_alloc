package westwood222.cloud_alloc.service.storage;

import lombok.Getter;
import lombok.NonNull;
import westwood222.cloud_alloc.dto.storage.delete.StorageDeleteRequest;
import westwood222.cloud_alloc.dto.storage.delete.StorageDeleteResponse;
import westwood222.cloud_alloc.dto.storage.read.StorageReadRequest;
import westwood222.cloud_alloc.dto.storage.read.StorageReadResponse;
import westwood222.cloud_alloc.dto.storage.upload.StorageUploadRequest;
import westwood222.cloud_alloc.dto.storage.upload.StorageUploadResponse;
import westwood222.cloud_alloc.exception.external.ExternalException;
import westwood222.cloud_alloc.model.Account;

import javax.annotation.Nonnull;

/**
 * Abstract class for all cloud storage provider services.
 * All classes extend from this class MUST IMPLEMENT an addition {@code createInstance()} method.
 */
@Getter
public abstract class StorageService implements Comparable<StorageService> {
    private final Account account;

    @NonNull
    protected Long freeSpace;       // the current free space in the cloud storage specified by account

    protected StorageService(Account account, @NonNull Long freeSpace) {
        this.account = account;
        this.freeSpace = freeSpace;
    }

    /**
     * Construct an empty non-functional {@link StorageService} that will be used to perform query.
     *
     * @param freeSpace space needed.
     * @return an empty non-functional {@link StorageService}
     */
    public static StorageService createInstance(@Nonnull Long freeSpace) {
        return new StorageService(null, freeSpace) {
            @Override
            public StorageUploadResponse upload(StorageUploadRequest request) {
                return null;
            }

            @Override
            public StorageReadResponse read(StorageReadRequest request) {
                return null;
            }

            @Override
            public StorageDeleteResponse delete(StorageDeleteRequest request) {
                return null;
            }
        };
    }

    /**
     * Upload a file to the cloud storage in {@link StorageService#account}.
     *
     * @param request contains Multipart of the file, and additional fields needed for uploading
     * @return foreignId of the uploaded file, as well as additional info needed by the caller.
     * @throws ExternalException when something went wrong during uploading
     */
    public abstract StorageUploadResponse upload(StorageUploadRequest request);

    /**
     * Read/get a file from the cloud storage in {@link StorageService#account}.
     *
     * @param request foreignId of the target file, and additional fields needed for uploading
     * @return link (generated by the cloud storage provider) to view the file (and possibly download it).
     * @throws ExternalException when something went wrong during reading the file
     */
    public abstract StorageReadResponse read(StorageReadRequest request);

    /**
     * Delete a file from the cloud storage in {@link StorageService#account}.
     *
     * @param request foreignId of the target file, and whether the delete operation is hard or soft.
     * @return the date and time that the file will be permanently deleted; null if hard delete.
     * @throws ExternalException when something went wrong during reading the file
     */
    public abstract StorageDeleteResponse delete(StorageDeleteRequest request);

    /**
     * Default ordering for service, which is ordered by available space in ascending order.
     * Note: this class has a natural ordering that is inconsistent with equals (i.e. a.compareTo(b) == 0 DOES NOT imply
     * that a.equals(b) == true; 2 different storage can have similar free space).
     *
     * @param otherStorageService the object to be compared.
     * @return a negative integer, zero, or a positive integer as this object is
     * less than, equal to, or greater than the specified object.
     */
    @Override
    public int compareTo(@Nonnull final StorageService otherStorageService) {
        return Long.compare(this.getFreeSpace(), otherStorageService.getFreeSpace());
    }
}
