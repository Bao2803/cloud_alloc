package westwood222.cloud_alloc.service.storage.manager;

import westwood222.cloud_alloc.dto.storage.manager.delete.ManagerDeleteRequest;
import westwood222.cloud_alloc.dto.storage.manager.delete.ManagerDeleteResponse;
import westwood222.cloud_alloc.dto.storage.manager.read.ManagerReadRequest;
import westwood222.cloud_alloc.dto.storage.manager.read.ManagerReadResponse;
import westwood222.cloud_alloc.dto.storage.manager.upload.ManagerUploadRequest;
import westwood222.cloud_alloc.dto.storage.manager.upload.ManagerUploadResponse;
import westwood222.cloud_alloc.exception.external.ExternalException;
import westwood222.cloud_alloc.repository.StorageWorkerRepository;
import westwood222.cloud_alloc.service.storage.worker.CloudStorageService;

/**
 * This class acts as a proxy for the internal {@code CloudStorageService}s by delegating the
 * uploading, deleting, and reading {@link westwood222.cloud_alloc.model.Resource} to {@code CloudStorageService}.
 * <p>
 * Typically, it uses {@link StorageWorkerRepository} to obtain the necessary
 * {@code CloudStorageService}.
 *
 * @see CloudStorageService
 * @see StorageWorkerRepository
 */
public interface StorageManager {
    /**
     * Upload a file to a cloud storage
     *
     * @param request contains Multipart of the file, and additional fields needed for uploading
     * @return foreignId of the uploaded file, as well as additional info needed by the caller.
     * @throws ExternalException when something went wrong during uploading
     */
    ManagerUploadResponse upload(ManagerUploadRequest request);

    /**
     * Read/get a file from a cloud storage
     *
     * @param request foreignId of the target file, and additional fields needed for uploading
     * @return link (generated by the cloud storage provider) to view the file (and possibly download it).
     * @throws ExternalException when something went wrong during reading the file
     */
    ManagerReadResponse read(ManagerReadRequest request);

    /**
     * Delete a file from a cloud storage
     *
     * @param request foreignId of the target file, and whether the delete operation is hard or soft.
     * @return the date and time that the file will be permanently deleted; null if hard delete.
     * @throws ExternalException when something went wrong during reading the file
     */
    ManagerDeleteResponse delete(ManagerDeleteRequest request);
}
